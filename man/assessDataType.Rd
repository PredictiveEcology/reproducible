% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/postProcess.R
\name{assessDataType}
\alias{assessDataType}
\alias{assessDataType.default}
\title{Assess the appropriate raster layer data type}
\usage{
assessDataType(ras, type = "writeRaster")

\method{assessDataType}{default}(ras, type = "writeRaster")
}
\arguments{
\item{ras}{The \code{RasterLayer} or \code{RasterStack} for which data type will be assessed.}

\item{type}{Character. \code{"writeRaster"} (default) or \code{"GDAL"} (defunct)
to return the recommended
data type for writing from the raster packages, respectively, or
\code{"projectRaster"} to return recommended resampling type.}
}
\value{
A character string indicating the data type of the spatial layer
(e.g., "INT2U"). See \code{\link[terra:geomtype]{terra::datatype()}}
}
\description{
When writing raster-type objects to disk, a \code{datatype} can be specified. These
functions help identify what smallest \code{datatype} can be used.
}
\examples{
if (!requireNamespace("terra")) stop("Need terra to run example")
  ## LOG1S
ras <- terra::rast(ncol = 10, nrow = 10)
ras[] <- rep(c(0,1),50)
assessDataType(ras)

ras <- terra::rast(ncol = 10, nrow = 10)
ras[] <- rep(c(0,1),50)
assessDataType(ras)

ras[] <- rep(c(TRUE,FALSE),50)
assessDataType(ras)

ras[] <- c(NA, NA, rep(c(0,1),49))
assessDataType(ras)

ras <- terra::rast(ncol = 10, nrow = 10)
ras[] <- c(0, NaN, rep(c(0,1),49))
assessDataType(ras)


## INT1S
ras[] <- -1:98
assessDataType(ras)

ras[] <- c(NA, -1:97)
assessDataType(ras)

## INT1U
ras <- terra::rast(ncol = 10, nrow = 10)
ras[] <- 1:100
assessDataType(ras)

ras[] <- c(NA, 2:100)
assessDataType(ras)

## INT2U
ras <- terra::rast(ncol = 10, nrow = 10)
ras[] <- round(runif(100, min = 64000, max = 65000))
assessDataType(ras)

## INT2S
ras <- terra::rast(ncol = 10, nrow = 10)
ras[] <- round(runif(100, min = -32767, max = 32767))
assessDataType(ras)

ras[54] <- NA
assessDataType(ras)

## INT4U
ras <- terra::rast(ncol = 10, nrow = 10)
ras[] <- round(runif(100, min = 0, max = 500000000))
assessDataType(ras)

ras[14] <- NA
assessDataType(ras)

## INT4S
ras <- terra::rast(ncol = 10, nrow = 10)
ras[] <- round(runif(100, min = -200000000, max = 200000000))
assessDataType(ras)

ras[14] <- NA
assessDataType(ras)

## FLT4S
ras <- terra::rast(ncol = 10, nrow = 10)
ras[] <- runif(100, min = -10, max = 87)
assessDataType(ras)

ras <- terra::rast(ncol = 10, nrow = 10)
ras[] <- round(runif(100, min = -3.4e+26, max = 3.4e+28))
assessDataType(ras)

ras <- terra::rast(ncol = 10, nrow = 10)
ras[] <- round(runif(100, min = 3.4e+26, max = 3.4e+28))
assessDataType(ras)

ras <- terra::rast(ncol = 10, nrow = 10)
ras[] <- round(runif(100, min = -3.4e+26, max = -1))
assessDataType(ras)

## FLT8S
ras <- terra::rast(ncol = 10, nrow = 10)
ras[] <- c(-Inf, 1, rep(c(0,1),49))
assessDataType(ras)

ras <- terra::rast(ncol = 10, nrow = 10)
ras[] <- c(Inf, 1, rep(c(0,1),49))
assessDataType(ras)

ras <- terra::rast(ncol = 10, nrow = 10)
ras[] <- round(runif(100, min = -1.7e+30, max = 1.7e+308))
assessDataType(ras)

ras <- terra::rast(ncol = 10, nrow = 10)
ras[] <- round(runif(100, min = 1.7e+30, max = 1.7e+308))
assessDataType(ras)

ras <- terra::rast(ncol = 10, nrow = 10)
ras[] <- round(runif(100, min = -1.7e+308, max = -1))
assessDataType(ras)

# 2 layer with different types LOG1S and FLT8S
ras <- terra::rast(ncol = 10, nrow = 10)
ras[] <- rep(c(0,1),50)
ras1 <- terra::rast(ncol = 10, nrow = 10)
ras1[] <- round(runif(100, min = -1.7e+308, max = -1))
sta <- c(ras, ras1)
assessDataType(sta)

}
