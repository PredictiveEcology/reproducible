% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/gis.R
\name{fastRasterize}
\alias{fastRasterize}
\title{Rasterize polygons quickly}
\usage{
fastRasterize(polygon, ras, field, filename, useGDAL, datatype)
}
\arguments{
\item{polygon}{A \code{SpatialPolygons} object.}

\item{ras}{A \code{RasterLayer} object.}

\item{field}{The field to use from \code{polygon}.}

\item{filename}{Character string giving the filename. Note: if \code{filename}
is supplied, only the basename of the file is used, and the
the output raster will be saved using \code{.tif} format.}

\item{useGDAL}{Logical. If missing (default): GDAL will be used if version >2
is available and \code{ras} is larger than 2e+6 pixels.}

\item{datatype}{Passed to raster object and disk-format.
See \code{\link[raster]{dataType}}.}
}
\value{
A \code{Raster*} object.
}
\description{
Uses either \code{velox} package or, if \code{GDAL} (> 2.0)  is installed and
accessible by \code{rgdal::getGDALVersionInfo} and the version,  then it will
default to \code{gdalUtils::gdal_rasterize}.
This default will be overridden for "small" rasters (fewer than 2e+6 cells),
as \code{velox} is faster in those cases.
The user can specify whether to use \code{GDAL} with the \code{useGDAL} argument.
\code{fastRasterize} will try to keep the object in memory or on disk,
depending on whether the input raster was on disk.
}
\examples{
\dontrun{
library(raster)

Sr1 <- Polygon(cbind(c(2, 4, 4, 0.9, 2), c(2, 3, 5, 4, 2)))
Sr2 <- Polygon(cbind(c(5, 4, 2, 5), c(2, 3, 2, 2)))
Sr3 <- Polygon(cbind(c(4, 4, 5, 10, 4), c(5, 3, 2, 5, 5)))

Srs1 <- Polygons(list(Sr1), "s1")
Srs2 <- Polygons(list(Sr2), "s2")
Srs3 <- Polygons(list(Sr3), "s3")
shp <- SpatialPolygons(list(Srs1, Srs2, Srs3), 1:3)
d <- data.frame(vals = 1:3, other = letters[3:1], stringsAsFactors = FALSE)
row.names(d) <- names(shp)
shp <- SpatialPolygonsDataFrame(shp, data = d)
poly <- list()
poly[[1]] <- raster(raster::extent(shp), vals = 0, res = c(1, 1))
poly[[2]] <- raster(raster::extent(shp), vals = 1, res = c(1, 1))
origStack <- stack(poly)

# rasterize
shpRas1 <- rasterize(shp, origStack, field = "vals")
shpRas2 <- fastRasterize(shp, origStack, field = "vals", useGDAL = FALSE, datatype = "FLT4S")
shpRas3 <- fastRasterize(shp, origStack, field = "vals", useGDAL = TRUE, datatype = "FLT4S")
shpRas4 <- fastRasterize(shp, origStack, field = "vals", useGDAL = TRUE, datatype = "FLT4S",
                         filename = "newMap")
}
}
\author{
Eliot McIntire
}
