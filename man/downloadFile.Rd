% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/download.R
\name{downloadFile}
\alias{downloadFile}
\title{A wrapper around a set of downloading functions}
\usage{
downloadFile(archive, targetFile, neededFiles, destinationPath, quick,
  checksumFile, checkSums, url, needChecksums, overwrite = TRUE)
}
\arguments{
\item{archive}{Optional character string giving the path of an archive
containing \code{targetFile}, or a vector giving a set of nested archives
(e.g., \code{c("xxx.tar", "inner.zip")}). If there is/are (an) inner
archive(s), but they are unknown, the function will try all until it finds
the \code{targetFile}}

\item{targetFile}{Character string giving the path to the eventual file
(raster, shapefile, csv, etc.) after downloading and extracting from a zip
or tar archive. This is the file \emph{before} it is passed to
\code{postProcess}. Currently, the internal checksumming does not checksum
the file after it is \code{postProcess}ed (e.g., cropped/reprojected/masked).
Using \code{Cache} around \code{prepInputs} will do a sufficient job in these cases.}

\item{neededFiles}{Character string giving the name of the file(s) to be extracted.}

\item{destinationPath}{Character string of a directory in which to download
and save the file that comes from \code{url} and is also where the function
will look for \code{archive} or \code{targetFile}.}

\item{quick}{Logical. This is passed internally to \code{\link{checksums}}
and \code{\link{downloadData}} (the quickCheck argument for both), and to
\code{\link{Cache}} (the quick argument). This results in faster, though
less robust checking of inputs. See the respective functions.}

\item{checkSums}{A checksums file, e.g., created by Checksums(..., write = TRUE)}

\item{url}{Optional character string indicating the URL to download from.
Normally, if used within a module, this url should be explicitly given as
sourceURL for an \code{expectsInput}. In that case, it will use the
module's checksums file to confirm that the download occurred correctly. If
URL is used here, an ad hoc checksums will be created in the
\code{destinationPath}. This will be used in subsequent calls to
\code{prepInputs}, comparing the file on hand with the ad hoc
\code{CHECKSUMS.txt}.}

\item{needChecksums}{A numeric, with \code{0} indicating do not write a new checksums,
\code{1} write a new one,
\code{2} append new information to existing one.}

\item{overwrite}{Logical. Should downloading and all the other actions occur
even if they pass the checksums or the files are all there.}

\item{moduleName}{Character string indicating SpaDES module name from which prepInputs is
being called
being called}

\item{modulePath}{Character string of the path where the \code{moduleName} is located.}
}
\description{
Currently, this only deals with \code{\link[googledrive]{drive_download}},
\code{\link{downloadData}}, and \code{\link[utils]{download.file}}.
}
\author{
Eliot McIntire
}
