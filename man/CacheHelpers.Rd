% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/DBI.R
\name{createCache}
\alias{createCache}
\alias{loadFromCache}
\alias{rmFromCache}
\alias{CacheDBFile}
\alias{CacheStorageDir}
\alias{CacheStoredFile}
\alias{CacheDBTableName}
\alias{CacheIsACache}
\title{Functions to create and work with a cache}
\usage{
createCache(
  cachePath = getOption("reproducible.cachePath"),
  drv = getOption("reproducible.drv", RSQLite::SQLite()),
  conn = getOption("reproducible.conn", NULL),
  force = FALSE
)

loadFromCache(
  cachePath = getOption("reproducible.cachePath"),
  cacheId,
  format = getOption("reproducible.cacheSaveFormat", "rds"),
  drv = getOption("reproducible.drv", RSQLite::SQLite()),
  conn = getOption("reproducible.conn", NULL)
)

rmFromCache(
  cachePath = getOption("reproducible.cachePath"),
  cacheId,
  drv = getOption("reproducible.drv", RSQLite::SQLite()),
  conn = getOption("reproducible.conn", NULL),
  format = getOption("reproducible.cacheSaveFormat", "rds")
)

CacheDBFile(
  cachePath = getOption("reproducible.cachePath"),
  drv = getOption("reproducible.drv", RSQLite::SQLite()),
  conn = getOption("reproducible.conn", NULL)
)

CacheStorageDir(cachePath = getOption("reproducible.cachePath"))

CacheStoredFile(
  cachePath = getOption("reproducible.cachePath"),
  cacheId,
  format = getOption("reproducible.cacheSaveFormat", "rds")
)

CacheDBTableName(
  cachePath = getOption("reproducible.cachePath"),
  drv = getOption("reproducible.drv", RSQLite::SQLite())
)

CacheIsACache(
  cachePath = getOption("reproducible.cachePath"),
  create = FALSE,
  drv = getOption("reproducible.drv", RSQLite::SQLite()),
  conn = getOption("reproducible.conn", NULL)
)
}
\arguments{
\item{cachePath}{A path describing the directory in which to create
the database file(s)}

\item{drv}{A driver, passed to \code{dbConnect}}

\item{conn}{A \linkS4class{DBIConnection} object, as returned by
\code{\link[DBI:dbConnect]{dbConnect()}}.}

\item{force}{Logical. Should it create a cache in the \code{cachePath},
even if it already exists, overwriting.}

\item{cacheId}{The cacheId or otherwise digested hash value, as character string.}

\item{format}{The text string representing the file extension used normally by
different save formats; currently only \code{"rds"} or \code{"qs"}. Defaults
to \code{getOption("reproducible.cacheSaveFormat", "rds")}}

\item{create}{Logical. Currently only affects non RQSLite default drivers. If this
is \code{TRUE} and there is no Cache database, the function will create one.}
}
\value{
\code{createCache} does not return a value; it is called for side effects.

\code{loadFromCache} returns the object from the cache that has the particular \code{cacheId}.

\code{rmFromCache} has no return value; it is called for its side effects.

\code{CacheDBFile} returns the name of the database file for a given Cache.

\code{CacheStorageDir} returns the name of the directory where cached objects are
stored.

\code{CacheStoredFile} returns the name of the file in which the cacheId object is stored.
This can be loaded to memory with e.g., \code{loadFile}.

\code{CacheDBTableName} returns the name of the table inside the SQL database, if that
is being used.

\code{CacheIsACache} returns a logical indicating whether the \code{cachePath} is currently
a \code{reproducible} cache database.
}
\description{
These are not intended for normal use.
}
\details{
This function will create a Cache folder structure and necessary files, based on
the particular \code{drv} or \code{conn} provided.

\code{rmFromCache} removes one or more items from the cache, and updates the cache
database files.

\code{CacheStoredFile} returns the file path to the file with the specified hash value.

\code{CacheStoredFile} returns the file path to the file with the specified hash value.

\code{CacheIsACache} returns a logical of whether the specified cachePath
is actually a functioning cache.
}
\examples{
newCache <- tempdir2("cacheHelperExamples")
createCache(newCache)

out <- Cache(rnorm(1), cachePath = newCache)
cacheId <- gsub("cacheId:", "", attr(out, "tags"))
loadFromCache(newCache, cacheId = cacheId)

rmFromCache(newCache, cacheId = cacheId)

# clean up
unlink(dirname(newCache), recursive = TRUE)

newCache <- tempdir2("cacheHelperExamples")
createCache(newCache)

CacheDBFile(newCache)
CacheStorageDir(newCache)

out <- Cache(rnorm(1), cachePath = newCache)
cacheId <- gsub("cacheId:", "", attr(out, "tags"))
CacheStoredFile(newCache, cacheId = cacheId)

# The name of the table inside the SQL database
CacheDBTableName(newCache)

CacheIsACache(newCache) # returns TRUE

# clean up
unlink(dirname(newCache), recursive = TRUE)
}
