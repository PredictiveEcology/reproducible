% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/DBI.R
\name{createCache}
\alias{createCache}
\alias{loadFromCache}
\alias{rmFromCache}
\title{Functions to create and work giwth a cache}
\usage{
createCache(
  cachePath = getOption("reproducible.cachePath"),
  drv = getOption("reproducible.drv", RSQLite::SQLite()),
  conn = getOption("reproducible.conn", NULL),
  force = FALSE
)

loadFromCache(
  cachePath = getOption("reproducible.cachePath"),
  cacheId,
  format = getOption("reproducible.cacheSaveFormat", "rds"),
  drv = getOption("reproducible.drv", RSQLite::SQLite()),
  conn = getOption("reproducible.conn", NULL)
)

rmFromCache(
  cachePath = getOption("reproducible.cachePath"),
  cacheId,
  drv = getOption("reproducible.drv", RSQLite::SQLite()),
  conn = getOption("reproducible.conn", NULL),
  format = getOption("reproducible.cacheSaveFormat", "rds")
)
}
\arguments{
\item{cachePath}{A path describing the directory in which to create
the database file(s)}

\item{drv}{A driver, passed to \code{dbConnect}}

\item{conn}{A \linkS4class{DBIConnection} object, as returned by
\code{\link[DBI:dbConnect]{dbConnect()}}.}

\item{force}{Logical. Should it create a cache in the \code{cachePath},
even if it already exists, overwriting.}

\item{cacheId}{The cacheId or otherwise digested hash value, as character string.}

\item{format}{The text string representing the file extension used normally by
different save formats; currently only \code{"rds"} or \code{"qs"}. Defaults
to \code{getOption("reproducible.cacheSaveFormat", "rds")}}
}
\value{
\code{createCache} does not return a value; it is called for side effects.

\code{loadFromCache} returns the object from the cache that has the particular \code{cacheId}.

\code{rmFromCache} has no return value; it is called for its side effects.
}
\description{
Functions to create and work giwth a cache

Low level tools to work with Cache
}
\details{
This function will create a Cache folder structure and necessary files, based on
the particular \code{drv} or \code{conn} provided.

\code{rmFromCache} removes one or more items from the cache, and updates the cache
database files.
}
\examples{
newCache <- tempdir2("cacheHelperExamples")
createCache(newCache)

out <- Cache(rnorm(1), cacheRepo = newCache)
cacheId <- gsub("cacheId:", "", attr(out, "tags"))
loadFromCache(newCache, cacheId = cacheId)

rmFromCache(newCache, cacheId = cacheId)

# clean up
unlink(dirname(newCache), recursive = TRUE)

}
